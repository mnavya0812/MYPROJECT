package com.uhc.myuhc.api.impl;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import javax.jcr.Session;
import org.apache.felix.scr.annotations.Activate;
import org.apache.felix.scr.annotations.Component;
import org.apache.felix.scr.annotations.ConfigurationPolicy;
import org.apache.felix.scr.annotations.Properties;
import org.apache.felix.scr.annotations.Property;
import org.apache.felix.scr.annotations.Reference;
import org.apache.felix.scr.annotations.Service;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.apache.sling.api.resource.Resource;
import org.apache.sling.api.resource.ResourceResolver;
import org.apache.sling.api.resource.ResourceResolverFactory;
import org.apache.sling.api.resource.ValueMap;
import org.apache.sling.commons.osgi.PropertiesUtil;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.day.cq.search.Query;
import com.day.cq.dam.api.Asset;
import com.day.cq.dam.api.AssetManager;
import com.day.cq.search.PredicateGroup;
import com.day.cq.search.QueryBuilder;
import com.day.cq.search.result.Hit;
import com.day.cq.search.result.SearchResult;
import com.uhc.myuhc.api.AssetCheckService;

/**
 * Adidas Asset Search Scheduler Job. Reads Asset filenames from Excel and
 * updates the status if Asset is found in DAM.
 */

@Component(metatype = true, label = "Adidas Asset Search Scheduler", description = "Reads Asset filenames from Excel and updates the status if Asset is found in DAM", immediate = true, policy = ConfigurationPolicy.OPTIONAL)
@Service

public class AssetSearchServiceImpl implements AssetCheckService {

	private final Logger log = LoggerFactory.getLogger(getClass());

	@Reference
	ResourceResolverFactory resourceResolverFactory;

	ResourceResolver resourceResolver;
	Session session;

	@Reference
	private QueryBuilder queryBuilder;

	List<String> assetList;
	List<String> assetsNotFoundList;

	@Activate
	protected void activate(final Map<String, Object> config) {
		log.info("Inside activate of ScheduledAssetSearch");
	}

	@Override
	public Workbook checkAssets() throws Exception {

		log.info("Inside getAssetListFromExcel of ScheduledAssetSearch");
		assetList = new ArrayList<String>();
		String assetListFilePath = "/content/dam/assetsearch.xlsx";
		resourceResolver = resourceResolverFactory.getAdministrativeResourceResolver(null);
		session = resourceResolver.adaptTo(Session.class);
		Resource resource = resourceResolver.getResource(assetListFilePath);

		if ((resource != null) && (resource instanceof Resource)) {
			Resource fileResource = resourceResolver
					.getResource(assetListFilePath + "/jcr:content/renditions/original/jcr:content");
			if ((fileResource != null) && (fileResource instanceof Resource)) {
				ValueMap resourceProperties = fileResource.adaptTo(ValueMap.class);
				InputStream fileBinary = resourceProperties.get("jcr:data", InputStream.class);

				try {
					Workbook workbook = new XSSFWorkbook(fileBinary);
					Sheet datatypeSheet = workbook.getSheetAt(0);
					Iterator<Row> iterator = datatypeSheet.iterator();
					String filename = "assetsearch_updated.xls";
					Workbook workbook1 = new XSSFWorkbook();
					Sheet writableSheet = workbook1.createSheet();
					Row newRow = writableSheet.createRow(0);
					newRow.createCell(0).setCellValue("Asset Name");
					newRow.createCell(1).setCellValue("Assest Found");
					newRow.createCell(2).setCellValue("Asset Path");
					int rowCount = 1;

					while (iterator.hasNext()) {

						try {
							Row currentRow = iterator.next();
							Iterator<Cell> cellIterator = currentRow.iterator();
							log.info("current row:" + currentRow);
							newRow = writableSheet.createRow(rowCount);
							while (cellIterator.hasNext()) {

								Cell currentCell = cellIterator.next();
								String assetFound = "No";
								String assetPath = "";
								log.info("current cell: " + currentCell);
								assetList.add(currentCell.getStringCellValue());
								log.info("Asset name from Excel :: " + currentCell.getStringCellValue());
								newRow.createCell(0).setCellValue(currentCell.getStringCellValue());

								Map<String, String> map = new HashMap<String, String>();
								map.put("path", "/content");
								map.put("type", "dam:Asset");
								map.put("nodename", currentCell.getStringCellValue());
								log.info("PredicateGroup: " + PredicateGroup.create(map));
								Query query = queryBuilder.createQuery(PredicateGroup.create(map), session);
								SearchResult result = query.getResult();
								for (Hit hit : result.getHits()) {
									assetFound = "Yes";
									assetPath = hit.getPath();
								}

								newRow.createCell(1).setCellValue(assetFound);
								newRow.createCell(2).setCellValue(assetPath);

							}
							rowCount++;
						} catch (Exception e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}
					}

					FileOutputStream fileOut = new FileOutputStream("poi-generated-file.xlsx");
					workbook1.write(fileOut);
					fileOut.close();
					return workbook1;					

				} catch (FileNotFoundException e) {
					log.error("FileNotFoundException in getAssetListFromExcel method of ScheduledAssetSearch :: "
							+ e.getMessage());
				} catch (IOException e) {
					log.error("Exception in getAssetListFromExcel method of ScheduledAssetSearch :: " + e.getMessage());
				} catch (Exception e) {
					log.error("Exception in getAssetListFromExcel method of ScheduledAssetSearch :: " + e.getMessage());
				}
				log.info("assetList: " + assetList.toString());
			}
		}
		return null;
	}
}